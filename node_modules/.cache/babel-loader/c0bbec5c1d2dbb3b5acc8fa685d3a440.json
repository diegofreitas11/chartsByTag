{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/diegofreitas/chartsByTag/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport api, { lastfmKey, source } from './services/api';\nimport ReactLoading from 'react-loading';\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport { UsernameInput } from './components/UsernameInput';\n/*\n    loadData = async (username) => {\n        this.setState({\n            isMainTopLoading: true\n        })\n\n        try{\n            let result = await api.get(\n                `?api_key=${lastfmKey}&method=user.gettopartists&username=${username}&limit=10&format=json`\n            );\n\n            let list = result.data.topartists.artist;\n\n            this.setState({\n                username,\n                error: false,\n                isFirstScreen: false,\n                isMainTopLoading: false,\n                listToRender: list,\n                defaultList: list\n            });\n\n            this.renderList(list);\n\n        }catch(e){\n            this.setState({\n                listToRender: [],\n                error: true\n            })\n        }\n    }\n\n    filter = async (tag) => {\n\n        this.setState({ \n            filteredTopLoadingProgress: 1\n        })\n\n        var setCancelToken = this.state.isFetchCancelled ? false : true;\n\n        try{\n            let page = 1;\n            let newFilteredList = [];\n\n            while(newFilteredList.length < 10){\n                \n                let listToFilter;\n                if(page > 1){\n                    let result = await api.get(\n                        `?api_key=${lastfmKey}&method=user.gettopartists&username=${this.state.username}&limit=10&page=${page}&format=json`\n                    );\n                    listToFilter = result.data.topartists.artist;\n                }else{\n                    listToFilter = this.state.defaultList;\n                }\n\n                for(let item of listToFilter){\n                    if(newFilteredList.length !== 10){\n                        let config = setCancelToken ?\n                        { cancelToken: source.token } : {}\n\n                        let result = await api.get(\n                            `?api_key=${lastfmKey}&method=artist.gettoptags&artist=${encodeURIComponent(item.name)}&format=json`,\n                            config\n                        );\n        \n                        let topTags = result.data.toptags.tag;\n                        console.log(item.name)\n                        \n                        let limit = topTags.length >= 5 ? 5 : topTags.length;\n\n                        for(var i = 0; i < limit ; i++){\n                            if(topTags[i].name === tag){\n                                item.visible = false;\n                                newFilteredList.push(item)\n                            }\n                        }\n                    }\n                }\n\n                page++;\n                this.setState({\n                    filteredTopLoadingProgress: newFilteredList.length > 0 ? newFilteredList.length * 10 : 1\n                })\n\n                console.log(newFilteredList.length)\n\n            }\n\n            this.setState({\n                listToRender: newFilteredList,\n                filteredTopLoadingProgress: null\n            });\n\n            this.renderList(newFilteredList);\n\n        }catch(e){\n            this.setState({\n                listToRender: []\n            })\n        }\n    }\n\n    renderList = async (list) => {\n        console.log(list)\n        for(var item of list){\n            await new Promise(resolve => setTimeout(resolve, 300))\n            item.visible = true;\n            this.setState({\n                listToRender: list\n            })      \n        }\n    }\n\n    backToFirstScreen = () => {\n        source.cancel();\n    \n        this.setState({\n            listToRender: [],\n            isFetchCancelled: true,\n            filteredTopLoadingProgress: null,\n            isFirstScreen: true,\n            username: null,\n            error: false\n        })\n    }\n\n    cancelFetching = () => {\n        source.cancel();\n        this.setState({\n            filteredTopLoadingProgress: null,\n            listToRender: this.state.defaultList.map(item => {\n                item.visible = false;\n                return item;\n            })\n        })\n        this.renderList(this.state.defaultList)\n    }\n*/\n\nconst Main = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(UsernameInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Main;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 160,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/diegofreitas/chartsByTag/src/index.js"],"names":["React","useState","ReactDOM","api","lastfmKey","source","ReactLoading","ProgressBar","UsernameInput","Main","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,qBAAP;AACA,OAAOC,GAAP,IAAcC,SAAd,EAAyBC,MAAzB,QAAuC,gBAAvC;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,IAAI,GAAG,MAAM;AACf,sBACI;AAAK,IAAA,SAAS,EAAG,WAAjB;AAAA,2BACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAND;;KAAMA,I;AAQNP,QAAQ,CAACQ,MAAT,eAAgB,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport api, { lastfmKey, source } from './services/api';\nimport ReactLoading from 'react-loading';\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport { UsernameInput } from './components/UsernameInput';\n\n\n\n/*\n    loadData = async (username) => {\n        this.setState({\n            isMainTopLoading: true\n        })\n\n        try{\n            let result = await api.get(\n                `?api_key=${lastfmKey}&method=user.gettopartists&username=${username}&limit=10&format=json`\n            );\n\n            let list = result.data.topartists.artist;\n\n            this.setState({\n                username,\n                error: false,\n                isFirstScreen: false,\n                isMainTopLoading: false,\n                listToRender: list,\n                defaultList: list\n            });\n\n            this.renderList(list);\n\n        }catch(e){\n            this.setState({\n                listToRender: [],\n                error: true\n            })\n        }\n    }\n\n    filter = async (tag) => {\n\n        this.setState({ \n            filteredTopLoadingProgress: 1\n        })\n\n        var setCancelToken = this.state.isFetchCancelled ? false : true;\n\n        try{\n            let page = 1;\n            let newFilteredList = [];\n\n            while(newFilteredList.length < 10){\n                \n                let listToFilter;\n                if(page > 1){\n                    let result = await api.get(\n                        `?api_key=${lastfmKey}&method=user.gettopartists&username=${this.state.username}&limit=10&page=${page}&format=json`\n                    );\n                    listToFilter = result.data.topartists.artist;\n                }else{\n                    listToFilter = this.state.defaultList;\n                }\n\n                for(let item of listToFilter){\n                    if(newFilteredList.length !== 10){\n                        let config = setCancelToken ?\n                        { cancelToken: source.token } : {}\n\n                        let result = await api.get(\n                            `?api_key=${lastfmKey}&method=artist.gettoptags&artist=${encodeURIComponent(item.name)}&format=json`,\n                            config\n                        );\n        \n                        let topTags = result.data.toptags.tag;\n                        console.log(item.name)\n                        \n                        let limit = topTags.length >= 5 ? 5 : topTags.length;\n\n                        for(var i = 0; i < limit ; i++){\n                            if(topTags[i].name === tag){\n                                item.visible = false;\n                                newFilteredList.push(item)\n                            }\n                        }\n                    }\n                }\n\n                page++;\n                this.setState({\n                    filteredTopLoadingProgress: newFilteredList.length > 0 ? newFilteredList.length * 10 : 1\n                })\n\n                console.log(newFilteredList.length)\n\n            }\n\n            this.setState({\n                listToRender: newFilteredList,\n                filteredTopLoadingProgress: null\n            });\n\n            this.renderList(newFilteredList);\n\n        }catch(e){\n            this.setState({\n                listToRender: []\n            })\n        }\n    }\n\n    renderList = async (list) => {\n        console.log(list)\n        for(var item of list){\n            await new Promise(resolve => setTimeout(resolve, 300))\n            item.visible = true;\n            this.setState({\n                listToRender: list\n            })      \n        }\n    }\n\n    backToFirstScreen = () => {\n        source.cancel();\n    \n        this.setState({\n            listToRender: [],\n            isFetchCancelled: true,\n            filteredTopLoadingProgress: null,\n            isFirstScreen: true,\n            username: null,\n            error: false\n        })\n    }\n\n    cancelFetching = () => {\n        source.cancel();\n        this.setState({\n            filteredTopLoadingProgress: null,\n            listToRender: this.state.defaultList.map(item => {\n                item.visible = false;\n                return item;\n            })\n        })\n        this.renderList(this.state.defaultList)\n    }\n*/\n\n\nconst Main = () => {\n    return(\n        <div className = \"container\">\n            <UsernameInput />\n        </div>\n    )\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}
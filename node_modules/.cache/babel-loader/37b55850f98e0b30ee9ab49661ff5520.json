{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/diegofreitas/chartsByTag/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport api, { lastfmKey, source } from './services/api';\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport { UsernameInput } from './components/UsernameInput';\nimport { ResultList } from './components/ResultList';\nimport { TagInput } from './components/TagInput';\nimport { Profile } from './components/Profile';\nimport { LoadingOverlay } from './components/LoadingOverlay';\nimport { ProgressLoading } from './components/ProgressLoading';\n/*\n    loadData = async (username) => {\n        this.setState({\n            isMainTopLoading: true\n        })\n\n        try{\n            let result = await api.get(\n                `?api_key=${lastfmKey}&method=user.gettopartists&username=${username}&limit=10&format=json`\n            );\n\n            let list = result.data.topartists.artist;\n\n            this.setState({\n                username,\n                error: false,\n                isFirstScreen: false,\n                isMainTopLoading: false,\n                listToRender: list,\n                defaultList: list\n            });\n\n            this.renderList(list);\n\n        }catch(e){\n            this.setState({\n                listToRender: [],\n                error: true\n            })\n        }\n    }\n\n    filter = async (tag) => {\n\n        this.setState({ \n            filteredTopLoadingProgress: 1\n        })\n\n        var setCancelToken = this.state.isFetchCancelled ? false : true;\n\n        try{\n            let page = 1;\n            let newFilteredList = [];\n\n            while(newFilteredList.length < 10){\n                \n                let listToFilter;\n                if(page > 1){\n                    let result = await api.get(\n                        `?api_key=${lastfmKey}&method=user.gettopartists&username=${this.state.username}&limit=10&page=${page}&format=json`\n                    );\n                    listToFilter = result.data.topartists.artist;\n                }else{\n                    listToFilter = this.state.defaultList;\n                }\n\n                for(let item of listToFilter){\n                    if(newFilteredList.length !== 10){\n                        let config = setCancelToken ?\n                        { cancelToken: source.token } : {}\n\n                        let result = await api.get(\n                            `?api_key=${lastfmKey}&method=artist.gettoptags&artist=${encodeURIComponent(item.name)}&format=json`,\n                            config\n                        );\n        \n                        let topTags = result.data.toptags.tag;\n                        console.log(item.name)\n                        \n                        let limit = topTags.length >= 5 ? 5 : topTags.length;\n\n                        for(var i = 0; i < limit ; i++){\n                            if(topTags[i].name === tag){\n                                item.visible = false;\n                                newFilteredList.push(item)\n                            }\n                        }\n                    }\n                }\n\n                page++;\n                this.setState({\n                    filteredTopLoadingProgress: newFilteredList.length > 0 ? newFilteredList.length * 10 : 1\n                })\n\n                console.log(newFilteredList.length)\n\n            }\n\n            this.setState({\n                listToRender: newFilteredList,\n                filteredTopLoadingProgress: null\n            });\n\n            this.renderList(newFilteredList);\n\n        }catch(e){\n            this.setState({\n                listToRender: []\n            })\n        }\n    }\n\n    renderList = async (list) => {\n        console.log(list)\n        for(var item of list){\n            await new Promise(resolve => setTimeout(resolve, 300))\n            item.visible = true;\n            this.setState({\n                listToRender: list\n            })      \n        }\n    }\n\n    backToFirstScreen = () => {\n        source.cancel();\n    \n        this.setState({\n            listToRender: [],\n            isFetchCancelled: true,\n            filteredTopLoadingProgress: null,\n            isFirstScreen: true,\n            username: null,\n            error: false\n        })\n    }\n\n    cancelFetching = () => {\n        source.cancel();\n        this.setState({\n            filteredTopLoadingProgress: null,\n            listToRender: this.state.defaultList.map(item => {\n                item.visible = false;\n                return item;\n            })\n        })\n        this.renderList(this.state.defaultList)\n    }\n*/\n\nconst Main = () => {\n  _s();\n\n  const [username, setUsername] = useState(null);\n  const [chart, setChart] = useState(null);\n  const [loading, setLoading] = useState(null);\n\n  const fetchTopArtists = async username => {\n    setLoading(true);\n\n    try {\n      let result = await api.get(`?api_key=${lastfmKey}&method=user.gettopartists&username=${username}&limit=10&format=json`);\n      setUsername(username);\n      setChart(result.data.topartists.artist);\n      setLoading(false);\n      console.log(result.data.topartists.artist);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const filterByTag = async tag => {\n    setLoading(true);\n\n    try {\n      //let page = 1;\n      let newFilteredList = [];\n      let result = await api.get(`?api_key=${lastfmKey}&method=user.gettopartists&username=${username}&limit=100&format=json`);\n      let listToFilter = result.data.topartists.artist;\n      let counter = 0;\n\n      while (newFilteredList.length < 10) {\n        let result = await api.get(`?api_key=${lastfmKey}&method=artist.gettoptags&artist=${encodeURIComponent(listToFilter[counter].name)}&format=json`);\n        let topTags = result.data.toptags.tag;\n        let limit = topTags.length >= 5 ? 5 : topTags.length;\n\n        for (var i = 0; i < limit; i++) {\n          if (topTags[i].name === tag) {\n            newFilteredList.push(listToFilter[counter]);\n          }\n        }\n\n        counter++; //progresso da barrinha\n      }\n\n      setChart(newFilteredList);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [chart ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Profile, {\n        username: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TagInput, {\n        filterByTag: tag => filterByTag(tag)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ResultList, {\n        list: chart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(UsernameInput, {\n      fetchTopArtists: username => fetchTopArtists(username)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 21\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingOverlay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Main, \"rq/tFIwZkfowGvySPrEfg/cvf/c=\");\n\n_c = Main;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 251,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["/home/diegofreitas/chartsByTag/src/index.js"],"names":["React","useState","ReactDOM","api","lastfmKey","source","ProgressBar","UsernameInput","ResultList","TagInput","Profile","LoadingOverlay","ProgressLoading","Main","username","setUsername","chart","setChart","loading","setLoading","fetchTopArtists","result","get","data","topartists","artist","console","log","e","filterByTag","tag","newFilteredList","listToFilter","counter","length","encodeURIComponent","name","topTags","toptags","limit","i","push","render","document","getElementById"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,qBAAP;AACA,OAAOC,GAAP,IAAcC,SAAd,EAAyBC,MAAzB,QAAuC,gBAAvC;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,aAAT,QAA8B,4BAA9B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAEf,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACe,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,IAAD,CAAlC;AACA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","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.css';\nimport api, { lastfmKey, source } from './services/api';\nimport ProgressBar from \"@ramonak/react-progress-bar\";\nimport { UsernameInput } from './components/UsernameInput';\nimport { ResultList } from './components/ResultList';\nimport { TagInput } from './components/TagInput';\nimport { Profile } from './components/Profile';\nimport { LoadingOverlay } from './components/LoadingOverlay';\nimport { ProgressLoading } from './components/ProgressLoading';\n\n\n/*\n    loadData = async (username) => {\n        this.setState({\n            isMainTopLoading: true\n        })\n\n        try{\n            let result = await api.get(\n                `?api_key=${lastfmKey}&method=user.gettopartists&username=${username}&limit=10&format=json`\n            );\n\n            let list = result.data.topartists.artist;\n\n            this.setState({\n                username,\n                error: false,\n                isFirstScreen: false,\n                isMainTopLoading: false,\n                listToRender: list,\n                defaultList: list\n            });\n\n            this.renderList(list);\n\n        }catch(e){\n            this.setState({\n                listToRender: [],\n                error: true\n            })\n        }\n    }\n\n    filter = async (tag) => {\n\n        this.setState({ \n            filteredTopLoadingProgress: 1\n        })\n\n        var setCancelToken = this.state.isFetchCancelled ? false : true;\n\n        try{\n            let page = 1;\n            let newFilteredList = [];\n\n            while(newFilteredList.length < 10){\n                \n                let listToFilter;\n                if(page > 1){\n                    let result = await api.get(\n                        `?api_key=${lastfmKey}&method=user.gettopartists&username=${this.state.username}&limit=10&page=${page}&format=json`\n                    );\n                    listToFilter = result.data.topartists.artist;\n                }else{\n                    listToFilter = this.state.defaultList;\n                }\n\n                for(let item of listToFilter){\n                    if(newFilteredList.length !== 10){\n                        let config = setCancelToken ?\n                        { cancelToken: source.token } : {}\n\n                        let result = await api.get(\n                            `?api_key=${lastfmKey}&method=artist.gettoptags&artist=${encodeURIComponent(item.name)}&format=json`,\n                            config\n                        );\n        \n                        let topTags = result.data.toptags.tag;\n                        console.log(item.name)\n                        \n                        let limit = topTags.length >= 5 ? 5 : topTags.length;\n\n                        for(var i = 0; i < limit ; i++){\n                            if(topTags[i].name === tag){\n                                item.visible = false;\n                                newFilteredList.push(item)\n                            }\n                        }\n                    }\n                }\n\n                page++;\n                this.setState({\n                    filteredTopLoadingProgress: newFilteredList.length > 0 ? newFilteredList.length * 10 : 1\n                })\n\n                console.log(newFilteredList.length)\n\n            }\n\n            this.setState({\n                listToRender: newFilteredList,\n                filteredTopLoadingProgress: null\n            });\n\n            this.renderList(newFilteredList);\n\n        }catch(e){\n            this.setState({\n                listToRender: []\n            })\n        }\n    }\n\n    renderList = async (list) => {\n        console.log(list)\n        for(var item of list){\n            await new Promise(resolve => setTimeout(resolve, 300))\n            item.visible = true;\n            this.setState({\n                listToRender: list\n            })      \n        }\n    }\n\n    backToFirstScreen = () => {\n        source.cancel();\n    \n        this.setState({\n            listToRender: [],\n            isFetchCancelled: true,\n            filteredTopLoadingProgress: null,\n            isFirstScreen: true,\n            username: null,\n            error: false\n        })\n    }\n\n    cancelFetching = () => {\n        source.cancel();\n        this.setState({\n            filteredTopLoadingProgress: null,\n            listToRender: this.state.defaultList.map(item => {\n                item.visible = false;\n                return item;\n            })\n        })\n        this.renderList(this.state.defaultList)\n    }\n*/\n\n\nconst Main = () => {\n\n    const [username, setUsername] = useState(null);\n    const [chart, setChart] = useState(null);\n    const [loading, setLoading] = useState(null);\n\n    const fetchTopArtists = async (username) => {\n        setLoading(true);\n\n        try{\n            let result = await api.get(\n                `?api_key=${lastfmKey}&method=user.gettopartists&username=${username}&limit=10&format=json`\n            );\n            \n            setUsername(username);\n            setChart(result.data.topartists.artist);\n            setLoading(false);\n            console.log(result.data.topartists.artist);\n\n        }catch(e){\n            console.log(e);\n        }\n    }\n\n    const filterByTag = async (tag) => {\n\n        setLoading(true);\n\n        try{\n            //let page = 1;\n            let newFilteredList = [];\n\n            let result = await api.get(\n                `?api_key=${lastfmKey}&method=user.gettopartists&username=${username}&limit=100&format=json`\n            );\n\n            let listToFilter = result.data.topartists.artist;\n            \n            let counter = 0;\n            while(newFilteredList.length < 10){\n\n                let result = await api.get(\n                    `?api_key=${lastfmKey}&method=artist.gettoptags&artist=${encodeURIComponent(listToFilter[counter].name)}&format=json`,\n                );\n\n                let topTags = result.data.toptags.tag;\n                \n                let limit = topTags.length >= 5 ? 5 : topTags.length;\n\n                for(var i = 0; i < limit ; i++){\n                    if(topTags[i].name === tag){\n                        newFilteredList.push(listToFilter[counter]);\n                    }\n                }                \n                \n                counter++;\n                 //progresso da barrinha\n            }\n\n            setChart(newFilteredList);\n            setLoading(false);\n\n        }catch(e){\n            console.log(e)\n        }\n    }\n\n    return(\n        <div className = \"container\">\n            {chart ? \n                (\n                    <>\n                    <Profile \n                        username = {username}\n                    />\n\n                    <TagInput \n                        filterByTag = {(tag) => filterByTag(tag)}\n                    />\n\n                    <ResultList\n                        list = {chart} \n                    />\n                    </>\n\n                ) : (\n                    <UsernameInput \n                        fetchTopArtists = {(username) => fetchTopArtists(username)}\n                    />\n                )\n            }\n            {loading && <LoadingOverlay />}\n        </div>\n    )\n}\n\nReactDOM.render(<Main />, document.getElementById('root'))"]},"metadata":{},"sourceType":"module"}